# Write a program (using functions!) that asks the user for a long string containing multiple words. Print back to the user the same string,
# except with the words in backwards order. For example, say I type the string:

#đại ý: Cho 1 câu, Hãy viết ngược lại từng từ trong câu đó
#ví dụ: khong co gi het -> het gi co khong
def revertword(p_sentence):
    if len(p_sentence)<=0:
        return p_sentence
    words = p_sentence.split(' ')
    if len(words)<=0:
        return p_sentence

    words.reverse()
    return ' '.join(words)



#print(revertword('khong co gi het'))

# bài toán cows and BULL

# Randomly generate a 4-digit number. Ask the user to guess a 4-digit number. For every digit that the user guessed correctly in the correct place, they have a “cow”. For every digit the user guessed correctly in the wrong place is a “bull.” Every time the user makes a guess, tell them how many “cows” and “bulls” they have. Once the user guesses the correct number, the game is over. Keep track of the number of guesses the user makes throughout teh game and tell the user at the end.
#
# Say the number generated by the computer is 1038. An example interaction could look like this:

#Bài này là bài đếm bò, mình đổi lại yêu cầu 1 tí, so với bài gốc tiếng anh

#người dùng nhập vào 1 con số có 4 chữ số, mỗi chữ số có giá trị từ 1 đến 4
#Máy tính radom 1 con số có 4 chữ số, mỗi chữ số có giá trị từ 1 đến 4
#Nếu số của máy tính và người dùng giống nhau(không cần theo thứ tự, thì thoát chương trình)
#Ngược lại, với mỗi số người dùng đúng với máy tính, sẽ nhận được 1 con bò, ngược lại nhận 1 con cứu
#in ra số lượng bò và cừu người dùng nhận được
# 1 chữ số chỉ được so khớp 1 lần duy nhất

import random
random.random()

def random_number():
    m_lst = [str(random.randint(1,4)) for x in range(4)]
    return int(''.join(m_lst))

#print(random_number())

def cow_bull_game():
    while True:
        user_input = input('nhap vao so co 4 chu so: ')
        if len(user_input) !=4:
            continue
        machine_number = random_number()
        machine_number_lst =list(str(machine_number))


        for x_index in range(0,4):
            if user_input[x_index] in machine_number_lst:
                machine_number_lst.remove(user_input[x_index])
        if len(machine_number_lst) == 0:
            print('Predict all correctly')
            break
        print(str(len(machine_number_lst)) + " cows and " + str(4-len(machine_number_lst))+" bull")

#cow_bull_game()

#In this exercise, the task is to write a function that picks a random word from a list of words from the SOWPODS dictionary. Download this file and save it in the same directory as your Python code. This file is Peter Norvig’s compilation of the dictionary of words used in professional Scrabble tournaments. Each line in the file contains a single word.

# bai nay kha don gian

def pick_word():
    with open('sowpods.txt') as handle:
        lst_word = handle.readlines()

    random.random()

    return lst_word[random.randint(0,len(lst_word)-1)]

#print(pick_word())

#guess word
#Let’s continue building Hangman. In the game of Hangman, a clue word is given by the program that the player has to guess, letter by letter. The player guesses one letter at a time until the entire word has been guessed. (In the actual game, the player can only guess 6 letters incorrectly before losing).

# Let’s say the word the player has to guess is “EVAPORATE”. For this exercise, write the logic that asks a player to guess a letter and displays letters in the clue word that were guessed correctly. For now, let the player guess an infinite number of times until they get the entire word. As a bonus, keep track of the letters the player guessed and display a different message if the player tries to guess that letter again. Remember to stop the game when all the letters have been guessed correctly! Don’t worry about choosing a word randomly or keeping track of the number of guesses the player has remaining - we will deal with those in a future exercise.

def guess_word():
    random_word = pick_word().strip().lower()
    s_word = set(random_word)
    l_word = list(s_word)
    lst_guess = list('_'*len(s_word))
    print(random_word)

    while True:
        input_val = input('nhap vao 1 ky tu chu: ')
        if len(input_val)!=1:
            continue

        input_val = input_val.lower()

        if input_val in s_word:
            word_index = l_word.index(input_val)
            if lst_guess[word_index] == '_':
                lst_guess[word_index] = '1'
                print(input_val + " correct")
            else:
                print("letter "+input_val +" already predict")
        else:
            print(input_val+" incorrect")

        if '_' not in lst_guess:
            print('Predict done')
            break

#guess_word()

#Divisors
# Create a program that asks the user for a number and then prints out a list of all the divisors of that number. (If you don’t know what a divisor is, it is a number that divides evenly into another number. For example, 13 is a divisor of 26 because 26 / 13 has no remainder.)


# đại loại là nhập vào 1 số, in ra tất cả các số bị chia hết của số đó

def divisor_num():
    input_val = input('nhap vao mot so')
    int_val = int(input_val)
    for x in range(1,int_val):
        if int_val % x == 0:
            print(x)

#divisor_num()


# list comprehension
#Let’s say I give you a list saved in a variable: a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]. Write one line of Python that takes this list a and makes a new list that has only the even elements of this list in it.

def even_number_in_list(a):
    return [x for x in a if x%2 == 0]

print(even_number_in_list([1 ,2 ,3 ,4 ,5 ,6]))